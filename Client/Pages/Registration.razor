@page "/register"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Web
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@implements IAsyncDisposable

<PageTitle>Registration</PageTitle>

<h1 class="header centered">Registration</h1>

<div class="container">
    <div class="row">
        <div class="col-lg"></div>
        <div class="col-lg-8 centered">
            <RegistrationComponent RegistrationFunction="@DoRegister" />
        </div>
        <div class="col-lg"></div>
    </div>
</div>



@code {
    private HubConnection hubConnection = new HubConnectionBuilder()
        .WithUrl(new Uri("https://localhost:7132/chatHub"))
        .Build();

    protected override async Task OnInitializedAsync()
    {
        localStorage.RemoveItem("loginKey");

        hubConnection.Closed += async (error) =>
        {
            // Reconnects to the hub on disconnect
            await ConnectAndLoad();
        };

        await ConnectAndLoad();
    }

    private async Task ConnectAndLoad()
    {
        while (hubConnection.State != HubConnectionState.Connected)
        {
            try
            {
                await hubConnection.StartAsync();
            }
            catch (Exception)
            {
                await Task.Delay(1000);
            }
        }
    }

    private async Task<bool> DoRegister(string name, string? surname, string username)
    {
        if (hubConnection.State == HubConnectionState.Connected)
        {
            var loginKey = await hubConnection.InvokeAsync<string>("Register", name, surname, username);
            if (loginKey != null) {
                localStorage.SetItem("loginKey", loginKey);
                localStorage.SetItem("name", name);
                localStorage.SetItem("surname", surname);
                localStorage.SetItem("username", username);
                NavigationManager.NavigateTo("/chat");
                return true;
            }
        }
        return false;
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}