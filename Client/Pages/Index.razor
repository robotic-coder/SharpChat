@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using ChatApplication.Shared
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

<div class="form-group">
    <label>
        Name:
        <input @bind="name" />
    </label>
</div>
<div class="form-group">
    <label>
        Surname:
        <input @bind="surname" />
    </label>
</div>
<div class="form-group">
    <label>
        Username:
        <input @bind="username" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<Message> messages = new List<Message>();
    private string? name;
    private string? surname;
    private string? username;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(new Uri("http://localhost:5158/chatHub"))
            .Build();

        hubConnection.On<string, List<Message>>("ReadyToJoin", (userId, messages) =>
        {
            //this.name = name;
            this.messages = messages;
        });
        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            //messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("Register", name, surname, username);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}