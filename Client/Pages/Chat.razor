@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@using ChatApplication.Shared
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@inject IJSRuntime JsRuntime
@implements IAsyncDisposable

<PageTitle>Chat</PageTitle>

<div id="messagesScroll">
    <div id="messagesList">
        @foreach(var message in oldMessages)
        {
            var sideClass = (message.Sender?.Id == this.userID) ? "right" : "left";
            <div class="message @sideClass">
                <MessageComponent MessageData="@message"></MessageComponent>
            </div>
        }
        <div id="separator" hidden="@HideSeparator">
            <hr/><span>New messages</span><hr/>
        </div>
        @foreach (var message in newMessages)
        {   
            var sideClass = (message.Sender?.Id == this.userID) ? "right" : "left";
            <div class="message @sideClass">
                <MessageComponent MessageData="@message"></MessageComponent>
            </div>
        }
    </div>
    <div id="anchor"></div>
</div>

<div id="footer">
    <button @onclick="RemoveText" disabled="@NoTextPresent">X</button>
    <input class="middle" placeholder="Enter a message" @bind="text" @bind:event="oninput" @onkeydown="@KeyPressed" hidden="@IsDisconnected"/>
    <div class="middle disconnected" hidden="@IsConnected">Disconnected from server</div>
    <button @onclick="DoSend" disabled="@SendButtonDisabled">Send</button>
</div>

@code {
    private HubConnection hubConnection = new HubConnectionBuilder()
        .WithUrl(new Uri("https://localhost:7132/chatHub"))
        .Build();
    private List<Message> oldMessages = new List<Message>();
	private DateTime? oldMessagesLoaded;
    private List<Message> newMessages = new List<Message>();
    private string? userID;
    private string? text;

    protected override async Task OnInitializedAsync()
    {
        hubConnection.Closed += async (error) =>
        {
            // Reconnects to the hub on disconnect
            await ConnectAndLoad();
        };

        hubConnection.On<Message>("ReceiveMessage", (message) =>
        {
            this.newMessages.Add(message);
            if (this.oldMessagesLoaded == null || this.oldMessagesLoaded > message.Timestamp)
			{
				// Message arrived after loading old messages, but it was already in the history
                // Remove it from the history
				this.oldMessages = this.oldMessages.FindAll(m => !this.newMessages.Exists(m2 => m2.Id == m.Id));
			}
            StateHasChanged();
        });

		hubConnection.On("InvalidKey", () =>
        {
            NavigationManager.NavigateTo("/register");
        });

        await ConnectAndLoad();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("ScrollToBottom"); // in index.html
        }
    }

    private async Task ConnectAndLoad()
    {
        while (hubConnection.State != HubConnectionState.Connected)
        {
            try
            {
                StateHasChanged();
                await hubConnection.StartAsync();
            }
            catch (Exception)
            {
                await Task.Delay(1000);
            }
        }

        this.oldMessages = new List<Message>();
        this.oldMessagesLoaded = null;
        this.newMessages = new List<Message>();

        var loginKey = localStorage.GetItem<string>("loginKey");
        if (loginKey != null)
        {
			var joinResult = await this.hubConnection.InvokeAsync<Tuple<string, List<Message>>?>("JoinChat", loginKey);
			if (joinResult != null)
			{	
                this.userID = joinResult.Item1;
				this.oldMessages = joinResult.Item2.FindAll(m => !this.newMessages.Exists(m2 => m2.Id == m.Id)); // Removes old messages that were already received through ReceivedMessage
                this.oldMessagesLoaded = DateTime.Now;
                StateHasChanged();
			}
            else
            {
                NavigationManager.NavigateTo("/register");
            }
        }
		else
		{
			NavigationManager.NavigateTo("/register");
		}
    }

    private async Task DoSend()
    {
        await hubConnection.SendAsync("SendMessage", this.text);
        RemoveText();
    }

    private void RemoveText()
    {
        this.text = "";
    }

    private bool NoTextPresent => this.text == null || this.text == "";

    private bool HideSeparator => this.oldMessages.Count == 0;

    private bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    private bool IsDisconnected => !IsConnected;

    private bool SendButtonDisabled => NoTextPresent || IsDisconnected;

    private async Task KeyPressed(KeyboardEventArgs e)
    {
        if (this.text != null && this.text.Length <= 1)
        {
            StateHasChanged(); // Checks whether we can send, when there are 0 or 1 characters
        }
        if (!this.NoTextPresent && this.IsConnected && (e.Code == "Enter" || e.Code == "NumpadEnter"))
        {
            await DoSend();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}